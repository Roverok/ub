diff -Naurd WindowMaker-0.92.0.orig/WINGs/findfile.c WindowMaker-0.92.0/WINGs/findfile.c
--- WindowMaker-0.92.0.orig/WINGs/findfile.c	2004-10-12 20:30:07.000000000 +0200
+++ WindowMaker-0.92.0/WINGs/findfile.c	2006-04-04 15:32:56.000000000 +0200
@@ -30,6 +30,7 @@
 #include <string.h>
 #include <pwd.h>
 #include <limits.h>
+#include <locale.h>
 
 #ifndef PATH_MAX
 #define PATH_MAX  1024
@@ -231,7 +232,7 @@
  *
  *----------------------------------------------------------------------
  */
-char *wfindfile(char *paths, char *file)
+static char *wfindfile2(char *paths, char *file)
 {
     char *path;
     char *tmp, *tmp2;
@@ -295,6 +296,55 @@
 	return NULL;
 }
 
+char *wfindfile(char *paths, char *file)
+{
+    char *p;
+    int len;
+    len = strlen(file);
+    if (len >= 8 && !strcmp(&file[len-7], "[.LANG]")) {
+        /* if filename is "foobar[.LANG]" then... */
+        char *base;
+        char *locale;
+        len -= 7;
+        base = wmalloc(len+20);
+        memcpy(base, file, len);
+        if ((locale = setlocale(LC_MESSAGES, NULL)) != NULL) {
+            int i;
+            /* ... try "foobar.<language_TERRITORY>" first ... */
+            i = strcspn(locale, ".@");
+            if (i <= 16) {
+                base[len] = '.';
+                memcpy(&base[len+1], locale, i);
+                base[len+1+i] = '\0';
+                p = wfindfile2(paths, base);
+                if (p) {
+                    wfree(base);
+                    return p;
+                }
+            }
+            /* ... then try "foobar.<language>" ... */
+            i = strcspn(locale, "_.@");
+            if (i <= 16) {
+                base[len] = '.';
+                memcpy(&base[len+1], locale, i);
+                base[len+1+i] = '\0';
+                p = wfindfile2(paths, base);
+                if (p) {
+                    wfree(base);
+                    return p;
+                }
+            }
+        }
+        /* ... and finally try "foobar" */
+        base[len] = '\0';
+        p = wfindfile2(paths, base);
+        wfree(base);
+        return p;
+    } else {
+        return wfindfile2(paths, file);
+    }
+}
+ 
 char *wfindfileinlist(char **path_list, char *file)
 {
 	int i;
