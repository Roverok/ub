diff -Naur orig/src/ffmpeg.c patched/src/ffmpeg.c
--- orig/src/ffmpeg.c	2013-10-12 18:43:37.232873493 +0200
+++ patched/src/ffmpeg.c	2013-10-12 18:49:11.051954537 +0200
@@ -56,6 +56,9 @@
 #ifndef PKT_FLAG_KEY
 #define PKT_FLAG_KEY AV_PKT_FLAG_KEY
 #endif
+#ifndef AVCODEC_MAX_AUDIO_FRAME_SIZE
+#define AVCODEC_MAX_AUDIO_FRAME_SIZE 192000
+#endif
 
 /* Private data for ffmpeg files */
 typedef struct {
@@ -96,7 +99,7 @@
   enc->err_recognition = 1;
 #endif
 
-  if (!codec || avcodec_open(enc, codec) < 0)
+  if (!codec || avcodec_open2(enc, codec, NULL) < 0)
     return -1;
   if (enc->codec_type != AVMEDIA_TYPE_AUDIO) {
     lsx_fail("ffmpeg CODEC %x is not an audio CODEC", enc->codec_type);
@@ -178,7 +181,7 @@
   }
 
   /* Get CODEC parameters */
-  if ((ret = av_find_stream_info(ffmpeg->ctxt)) < 0) {
+  if ((ret = avformat_find_stream_info(ffmpeg->ctxt, NULL)) < 0) {
     lsx_fail("ffmpeg could not find CODEC parameters for %s", ft->filename);
     return SOX_EOF;
   }
@@ -267,12 +270,12 @@
 /*
  * add an audio output stream
  */
-static AVStream *add_audio_stream(sox_format_t * ft, AVFormatContext *oc, enum CodecID codec_id)
+static AVStream *add_audio_stream(sox_format_t * ft, AVFormatContext *oc, enum AVCodecID codec_id)
 {
   AVCodecContext *c;
   AVStream *st;
 
-  st = av_new_stream(oc, 1);
+  st = avformat_new_stream(oc, NULL);
   if (!st) {
     lsx_fail("ffmpeg could not alloc stream");
     return NULL;
@@ -306,7 +309,7 @@
   }
 
   /* open it */
-  if (avcodec_open(c, codec) < 0) {
+  if (avcodec_open2(c, codec, NULL) < 0) {
     lsx_fail("ffmpeg could not open CODEC");
     return SOX_EOF;
   }
diff -Naur orig/src/ffmpeg.h patched/src/ffmpeg.h
--- orig/src/ffmpeg.h	2012-01-23 23:27:33.000000000 +0100
+++ patched/src/ffmpeg.h	2013-10-12 18:38:05.913815524 +0200
@@ -26,6 +26,12 @@
 #else
 #include <ffmpeg/avformat.h>
 #endif
+#if HAVE_LIBAVCODEC_AVCODEC_H
+#include <libavcodec/avcodec.h>
+#else
+#include <ffmpeg/avcodec.h>
+#endif
+#include <libavutil/mathematics.h>
 
 #if defined __SUNPRO_C
   #pragma enable_warn
