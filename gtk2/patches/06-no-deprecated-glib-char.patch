diff -Naur orig/gtk/gtkbuilder.c patched/gtk/gtkbuilder.c
--- orig/gtk/gtkbuilder.c	2011-08-16 04:30:52.000000000 +0200
+++ patched/gtk/gtkbuilder.c	2013-01-01 01:39:31.378419748 +0100
@@ -1212,7 +1212,7 @@
   switch (G_TYPE_FUNDAMENTAL (type))
     {
     case G_TYPE_CHAR:
-      g_value_set_char (value, string[0]);
+      g_value_set_schar (value, string[0]);
       break;
     case G_TYPE_UCHAR:
       g_value_set_uchar (value, (guchar)string[0]);
diff -Naur orig/gtk/gtkobject.c patched/gtk/gtkobject.c
--- orig/gtk/gtkobject.c	2011-08-16 04:30:52.000000000 +0200
+++ patched/gtk/gtkobject.c	2013-01-01 01:39:05.538291618 +0100
@@ -126,7 +126,7 @@
 {
   switch (G_TYPE_FUNDAMENTAL (arg->type))
     {
-    case G_TYPE_CHAR:           GTK_VALUE_CHAR (*arg) = g_value_get_char (value);       break;
+    case G_TYPE_CHAR:           GTK_VALUE_CHAR (*arg) = g_value_get_schar (value);       break;
     case G_TYPE_UCHAR:          GTK_VALUE_UCHAR (*arg) = g_value_get_uchar (value);     break;
     case G_TYPE_BOOLEAN:        GTK_VALUE_BOOL (*arg) = g_value_get_boolean (value);    break;
     case G_TYPE_INT:            GTK_VALUE_INT (*arg) = g_value_get_int (value);         break;
@@ -157,7 +157,7 @@
 {
   switch (G_TYPE_FUNDAMENTAL (arg->type))
     {
-    case G_TYPE_CHAR:           g_value_set_char (value, GTK_VALUE_CHAR (*arg));        break;
+    case G_TYPE_CHAR:           g_value_set_schar (value, GTK_VALUE_CHAR (*arg));        break;
     case G_TYPE_UCHAR:          g_value_set_uchar (value, GTK_VALUE_UCHAR (*arg));      break;
     case G_TYPE_BOOLEAN:        g_value_set_boolean (value, GTK_VALUE_BOOL (*arg));     break;
     case G_TYPE_INT:            g_value_set_int (value, GTK_VALUE_INT (*arg));          break;
diff -Naur orig/gtk/gtksignal.c patched/gtk/gtksignal.c
--- orig/gtk/gtksignal.c	2011-08-16 04:30:52.000000000 +0200
+++ patched/gtk/gtksignal.c	2013-01-01 01:39:25.742391805 +0100
@@ -185,7 +185,7 @@
 {
   switch (G_TYPE_FUNDAMENTAL (arg->type))
     {
-    case G_TYPE_CHAR:		g_value_set_char (value, GTK_VALUE_CHAR (*arg));	break;
+    case G_TYPE_CHAR:		g_value_set_schar (value, GTK_VALUE_CHAR (*arg));	break;
     case G_TYPE_UCHAR:		g_value_set_uchar (value, GTK_VALUE_UCHAR (*arg));	break;
     case G_TYPE_BOOLEAN:	g_value_set_boolean (value, GTK_VALUE_BOOL (*arg));	break;
     case G_TYPE_INT:		g_value_set_int (value, GTK_VALUE_INT (*arg));		break;
@@ -212,7 +212,7 @@
 {
   switch (G_TYPE_FUNDAMENTAL (arg->type))
     {
-    case G_TYPE_CHAR:		g_value_set_char (value, GTK_VALUE_CHAR (*arg));		break;
+    case G_TYPE_CHAR:		g_value_set_schar (value, GTK_VALUE_CHAR (*arg));		break;
     case G_TYPE_UCHAR:		g_value_set_uchar (value, GTK_VALUE_UCHAR (*arg));		break;
     case G_TYPE_BOOLEAN:	g_value_set_boolean (value, GTK_VALUE_BOOL (*arg));		break;
     case G_TYPE_INT:		g_value_set_int (value, GTK_VALUE_INT (*arg));			break;
@@ -240,7 +240,7 @@
 {
   switch (G_TYPE_FUNDAMENTAL (arg->type))
     {
-    case G_TYPE_CHAR:		GTK_VALUE_CHAR (*arg) = g_value_get_char (value);	break;
+    case G_TYPE_CHAR:		GTK_VALUE_CHAR (*arg) = g_value_get_schar (value);	break;
     case G_TYPE_UCHAR:		GTK_VALUE_UCHAR (*arg) = g_value_get_uchar (value);	break;
     case G_TYPE_BOOLEAN:	GTK_VALUE_BOOL (*arg) = g_value_get_boolean (value);	break;
     case G_TYPE_INT:		GTK_VALUE_INT (*arg) = g_value_get_int (value);		break;
@@ -272,7 +272,7 @@
 {
   switch (G_TYPE_FUNDAMENTAL (arg->type))
     {
-    case G_TYPE_CHAR:		*GTK_RETLOC_CHAR (*arg) = g_value_get_char (value);	  break;
+    case G_TYPE_CHAR:		*GTK_RETLOC_CHAR (*arg) = g_value_get_schar (value);	  break;
     case G_TYPE_UCHAR:		*GTK_RETLOC_UCHAR (*arg) = g_value_get_uchar (value);	  break;
     case G_TYPE_BOOLEAN:	*GTK_RETLOC_BOOL (*arg) = g_value_get_boolean (value);	  break;
     case G_TYPE_INT:		*GTK_RETLOC_INT (*arg) = g_value_get_int (value);	  break;
diff -Naur orig/gtk/gtktreedatalist.c patched/gtk/gtktreedatalist.c
--- orig/gtk/gtktreedatalist.c	2011-08-16 04:30:52.000000000 +0200
+++ patched/gtk/gtktreedatalist.c	2013-01-01 01:39:11.422320793 +0100
@@ -129,7 +129,7 @@
       g_value_set_boolean (value, (gboolean) list->data.v_int);
       break;
     case G_TYPE_CHAR:
-      g_value_set_char (value, (gchar) list->data.v_char);
+      g_value_set_schar (value, (gchar) list->data.v_char);
       break;
     case G_TYPE_UCHAR:
       g_value_set_uchar (value, (guchar) list->data.v_uchar);
@@ -192,7 +192,7 @@
       list->data.v_int = g_value_get_boolean (value);
       break;
     case G_TYPE_CHAR:
-      list->data.v_char = g_value_get_char (value);
+      list->data.v_char = g_value_get_schar (value);
       break;
     case G_TYPE_UCHAR:
       list->data.v_uchar = g_value_get_uchar (value);
@@ -329,9 +329,9 @@
 	retval = 1;
       break;
     case G_TYPE_CHAR:
-      if (g_value_get_char (&a_value) < g_value_get_char (&b_value))
+      if (g_value_get_schar (&a_value) < g_value_get_schar (&b_value))
 	retval = -1;
-      else if (g_value_get_char (&a_value) == g_value_get_char (&b_value))
+      else if (g_value_get_schar (&a_value) == g_value_get_schar (&b_value))
 	retval = 0;
       else
 	retval = 1;
diff -Naur orig/gtk/tests/object.c patched/gtk/tests/object.c
--- orig/gtk/tests/object.c	2011-08-16 04:30:52.000000000 +0200
+++ patched/gtk/tests/object.c	2013-01-01 01:39:38.530455215 +0100
@@ -110,7 +110,7 @@
 {
   /* generate a value suitable for pspec */
   if (G_IS_PARAM_SPEC_CHAR (pspec))
-    ASSIGN_VALUE (g_value_set_char, value, GParamSpecChar*, pspec, default_value, minimum, maximum, dvalue);
+    ASSIGN_VALUE (g_value_set_schar, value, GParamSpecChar*, pspec, default_value, minimum, maximum, dvalue);
   else if (G_IS_PARAM_SPEC_UCHAR (pspec))
     ASSIGN_VALUE (g_value_set_uchar, value, GParamSpecUChar*, pspec, default_value, minimum, maximum, dvalue);
   else if (G_IS_PARAM_SPEC_INT (pspec))
@@ -182,7 +182,7 @@
   if (G_VALUE_HOLDS_BOOLEAN (value))
     return GINT_TO_POINTER(g_value_get_boolean (value));
   if (G_VALUE_HOLDS_CHAR (value))
-    return (void*) (gssize) g_value_get_char (value);
+    return (void*) (gssize) g_value_get_schar (value);
   if (G_VALUE_HOLDS_UCHAR (value))
     return (void*) (gsize) g_value_get_uchar (value);
   if (G_VALUE_HOLDS_INT (value))
