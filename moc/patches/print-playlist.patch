diff -Naur orig/interface.c patched/interface.c
--- orig/interface.c	2012-09-17 23:47:59.000000000 +0200
+++ patched/interface.c	2012-10-23 14:20:21.228447916 +0200
@@ -3976,6 +3976,65 @@
 	plist_free (queue);
 }
 
+void interface_cmdline_playlist_info (const int server_sock)
+{
+	srv_sock = server_sock;	/* the interface is not initialized, so set it
+				   here */
+	struct plist server_list;
+	plist_init(&server_list);
+
+	send_int_to_srv (CMD_GET_SERIAL);
+	plist_set_serial (&server_list, get_data_int());
+
+	if (!recv_server_plist(&server_list)) {
+		
+		if (!getcwd(cwd, sizeof(cwd)))
+			fatal ("Can't get CWD: %s.", strerror(errno));
+
+		/* this checks if the file exists */
+		if (file_type(create_file_name("playlist.m3u"))
+					== F_PLAYLIST)
+				plist_load (&server_list,
+					create_file_name(
+						"playlist.m3u"),
+					cwd, 1);
+	}
+	
+		char time_str[6];
+		struct file_tags *tags;
+
+		int i;
+		for (i = 0; i < server_list.num; i++){
+			
+			tags = plist_get_tags(&server_list,i);
+
+			if (tags->time != -1) {
+				sec_to_min (time_str, tags->time);
+			}
+			
+			printf("%i: ",i+1);
+			printf ("%s -- ", tags->title);
+			printf ("%s  ",
+				tags->artist
+				? tags->artist : "");
+			printf ("(%s)  ",
+				tags->album
+				? tags->album : "");
+			printf ("%s\t", time_str);
+			printf("\n");
+			free(tags);
+	
+	}
+	if (server_list.num == 0){
+		printf("There is nothing in the playlist\n");	
+	}
+		
+	plist_free (dir_plist);
+	plist_free (playlist);
+	plist_free (queue);
+	plist_free (&server_list);
+}
+
 void interface_cmdline_enqueue (int server_sock, lists_t_strs *args)
 {
 	int ix;
diff -Naur orig/interface.h patched/interface.h
--- orig/interface.h	2011-12-30 21:02:17.000000000 +0100
+++ patched/interface.h	2012-10-23 14:20:21.228447916 +0200
@@ -49,6 +49,7 @@
 void interface_cmdline_clear_plist (int server_sock);
 void interface_cmdline_append (int server_sock, struct lists_s_strs *args);
 void interface_cmdline_play_first (int server_sock);
+void interface_cmdline_playlist_info (const int server_sock);
 void interface_cmdline_file_info (const int server_sock);
 void interface_cmdline_playit (int server_sock, struct lists_s_strs *args);
 void interface_cmdline_seek_by (int server_sock, const int seek_by);
diff -Naur orig/main.c patched/main.c
--- orig/main.c	2012-09-30 22:06:04.000000000 +0200
+++ patched/main.c	2012-10-23 14:21:53.136903667 +0200
@@ -75,6 +75,7 @@
 	char *toggle;
 	char *on;
 	char *off;
+	int playlist;
 };
 
 
@@ -340,6 +341,7 @@
 "-o --on <controls>     Turn on a control (shuffle, autonext, repeat).\n"
 "-u --off <controls>    Turn off a control (shuffle, autonext, repeat).\n"
 "-t --toggle <controls> Toggle a control (shuffle, autonext, repeat).\n"
+"-z --playlist          Show current playlist information.\n"
 , prg_name);
 }
 
@@ -353,6 +355,8 @@
 
 	signal (SIGPIPE, SIG_IGN);
 	if (ping_server(sock)) {
+		if (params->playlist)
+			interface_cmdline_playlist_info (sock);
 		if (params->playit)
 			interface_cmdline_playit (sock, args);
 		if (params->clear)
@@ -605,6 +609,7 @@
 		{ "nosync",		0, NULL, 'n' },
 		{ "ascii",		0, NULL, 'A' },
 		{ "info",		0, NULL, 'i' },
+		{ "playlist",		0, NULL, 'z' },
 		{ "recursively",	0, NULL, 'e' },
 		{ "seek",		1, NULL, 'k' },
 		{ "jump",		1, NULL, 'j' },
@@ -623,7 +628,7 @@
 	assert (deferred != NULL);
 
 	while ((ret = getopt_long(argc, argv,
-					"VhDSFR:macpsxT:C:O:M:PUynArfiGelk:j:v:t:o:u:Q:q",
+					"VhDSFR:macpsxT:C:O:M:PUynArfizGelk:j:v:t:o:u:Q:q",
 					long_options, &opt_index)) != -1) {
 		switch (ret) {
 			case 'V':
@@ -769,6 +774,10 @@
 				params->get_formatted_info = 1;
 				params->dont_run_iface = 1;
 				break;
+			case 'z':
+				params->playlist = 1;
+				params->dont_run_iface = 1;
+				break;
 			default:
 				show_usage (argv[0]);
 				exit (1);
diff -Naur orig/mocp.1 patched/mocp.1
--- orig/mocp.1	2012-10-11 21:39:37.000000000 +0200
+++ patched/mocp.1	2012-10-23 14:20:21.228447916 +0200
@@ -98,6 +98,9 @@
 Bring down the server.
 .LP
 .TP
+.I -z --playlist
+Output the current playlist.
+.TP
 \fB\-P\fP, \fB\-\-pause\fP
 Request the server to pause playing.
 .LP
