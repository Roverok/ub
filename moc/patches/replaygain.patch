diff -Naur orig/audio.c patched/audio.c
--- orig/audio.c	2012-09-27 11:25:23.000000000 +0200
+++ patched/audio.c	2012-10-23 13:54:53.220870936 +0200
@@ -22,6 +22,10 @@
 #include <strings.h>
 #include <errno.h>
 #include <assert.h>
+#include <math.h>
+#ifdef HAVE_INTTYPES_H
+# include <inttypes.h>
+#endif
 
 #define DEBUG
 
@@ -114,6 +118,10 @@
 
 static int current_mixer = 0;
 
+float rg_get_scale(const struct file_tags *);
+void rg_process_float(float *buf, size_t size, float scale);
+int rg_use_album_gain();
+
 /* Check if the two sample rates don't differ so much that we can't play. */
 #define sample_rate_compat(sound, device) ((device) * 1.05 >= sound \
 		&& (device) * 0.95 <= sound)
@@ -813,11 +821,27 @@
 {
 	char *softmixed = NULL;
 	char *equalized = NULL;
+	char *attenuated = NULL;
+
+	if(replaygain_is_active())
+		{
+		  attenuated = xmalloc(size);
+		  memcpy(attenuated, buf, size);
+		  replaygain_process_buffer(attenuated, size, &driver_sound_params);
+		  buf = attenuated;
+		}
 
 	if (equalizer_is_active ())
 	{
-		equalized = xmalloc (size);
-		memcpy (equalized, buf, size);
+		  if (attenuated)
+		  {
+		    equalized = attenuated;
+		  }
+		  else
+		  {
+	            equalized = xmalloc(size);
+	            memcpy(equalized, buf, size);
+		  }
 
 		equalizer_process_buffer (equalized, size, &driver_sound_params);
 
@@ -1258,3 +1282,140 @@
 	if (current_mixer < 2)
 		hw.toggle_mixer_channel ();
 }
+
+int replaygain_is_active ()
+{
+	return 1;
+}
+
+/**
+ * Calculates the scaling factor for track samples according to tags.
+ *
+ * @return float Sample multiplicator.
+ */
+float rg_get_scale(const struct file_tags *tags)
+{
+	float gain, peak, scale;
+
+	if (rg_use_album_gain() && tags->rg_album) {
+		gain = tags->rg_album;
+		peak = tags->rg_album_peak;
+	} else if (tags->rg_track) {
+		gain = tags->rg_track;
+		peak = tags->rg_track_peak;
+	} else {
+		return 1.0;
+	}
+
+	scale = pow(10.0, gain / 20.0);
+	if (scale > 15.0)
+		scale = 15.0;
+
+	if (tags->rg_track_peak && (scale * tags->rg_track_peak > 1.0))
+		scale = 1.0 / tags->rg_track_peak;
+
+	return scale;
+}
+
+void rg_process_u8(uint8_t *buf, size_t size, float scale)
+{
+	size_t i;
+	for (i = 0; i < size; i++)
+		buf[i] = scale * (float)buf[i];
+}
+
+void rg_process_s8(int8_t *buf, size_t size, float scale)
+{
+	size_t i;
+	for (i = 0; i < size; i++)
+		buf[i] = scale * (float)buf[i];
+}
+
+void rg_process_u16(uint16_t *buf, size_t size, float scale)
+{
+	size_t i;
+	for (i = 0; i < size; i++)
+		buf[i] = scale * (float)buf[i];
+}
+
+void rg_process_s16(int16_t *buf, size_t size, float scale)
+{
+	size_t i;
+	for (i = 0; i < size; i++)
+		buf[i] = scale * (float)buf[i];
+}
+
+void rg_process_u32(uint32_t *buf, size_t size, float scale)
+{
+	size_t i;
+	for (i = 0; i < size; i++)
+		buf[i] = scale * (float)buf[i];
+}
+
+void rg_process_s32(int32_t *buf, size_t size, float scale)
+{
+	size_t i;
+	for (i = 0; i < size; i++)
+		buf[i] = scale * (float)buf[i];
+}
+
+void rg_process_float(float *buf, size_t size, float scale)
+{
+	size_t i;
+	for (i = 0; i < size; i++)
+		buf[i] = scale * (float)buf[i];
+}
+
+/**
+ * Modifies volumes according to replaygain tags.
+ */
+void replaygain_process_buffer (char *buf, size_t size, const struct sound_params *sound_params)
+{
+	struct file_tags *tags;
+	float scale;
+
+	tags = audio_get_curr_tags();
+	if (!tags)
+		return;
+
+	if ((scale = rg_get_scale(tags)) == 1.0) {
+		tags_free(tags);
+		return;
+	}
+
+	switch (sound_params->fmt & SFMT_MASK_FORMAT) {
+	case SFMT_U8:
+		rg_process_u8((uint8_t *)buf, size / sizeof(uint8_t), scale);
+		break;
+	case SFMT_S8:
+		rg_process_s8((int8_t *)buf, size / sizeof(int8_t), scale);
+		break;
+	case SFMT_U16:
+		rg_process_u16((uint16_t *)buf, size / sizeof(uint16_t), scale);
+		break;
+	case SFMT_S16:
+		rg_process_s16((int16_t *)buf, size / sizeof(int16_t), scale);
+		break;
+	case SFMT_U32:
+		rg_process_u32((uint32_t *)buf, size / sizeof(uint32_t), scale);
+		break;
+	case SFMT_S32:
+		rg_process_s32((int32_t *)buf, size / sizeof(int32_t), scale);
+		break;
+	case SFMT_FLOAT:
+		rg_process_float((float *)buf, size / sizeof(float), scale);
+		break;
+	}
+
+	tags_free(tags);
+}
+
+/**
+ * Check whether the album mode should be used.  Need to check for a config
+ * file option and, perhaps, compare current album name with previous/next
+ * tracks.
+ */
+int rg_use_album_gain ()
+{
+	return 0;
+}
diff -Naur orig/audio.h patched/audio.h
--- orig/audio.h	2011-12-30 21:02:17.000000000 +0100
+++ patched/audio.h	2012-10-23 13:49:54.895391612 +0200
@@ -262,6 +262,8 @@
 void audio_queue_clear ();
 void audio_queue_move (const char *file1, const char *file2);
 struct plist* audio_queue_get_contents ();
+int replaygain_is_active ();
+void replaygain_process_buffer (char *buf, size_t size, const struct sound_params *sound_params);
 
 #ifdef __cplusplus
 }
diff -Naur orig/decoder_plugins/flac/flac.c patched/decoder_plugins/flac/flac.c
--- orig/decoder_plugins/flac/flac.c	2012-09-17 22:44:19.000000000 +0200
+++ patched/decoder_plugins/flac/flac.c	2012-10-23 13:49:54.895391612 +0200
@@ -461,6 +461,14 @@
 		tags->track = atoi (value);
 		free (value);
 	}
+	else if (!strcasecmp(name, "replaygain_track_gain"))
+		tags->rg_track = atof (value);
+	else if (!strcasecmp(name, "replaygain_track_peak"))
+		tags->rg_track_peak = atof (value);
+	else if (!strcasecmp(name, "replaygain_album_gain"))
+		tags->rg_album = atof (value);
+	else if (!strcasecmp(name, "replaygain_album_peak"))
+		tags->rg_album_peak = atof (value);
 	else
 		free (value);
 
diff -Naur orig/decoder_plugins/mp3/mp3.c patched/decoder_plugins/mp3/mp3.c
--- orig/decoder_plugins/mp3/mp3.c	2012-09-27 11:25:44.000000000 +0200
+++ patched/decoder_plugins/mp3/mp3.c	2012-10-23 13:57:01.425506662 +0200
@@ -184,6 +184,38 @@
 	return comm;
 }
 
+/**
+ * Finds frames with ReplayGain data, copies it to file_tags.
+ */
+static void get_replay_gain(struct file_tags *info, const struct id3_tag *tag)
+{
+	unsigned int idx;
+	struct id3_frame *frame;
+	id3_latin1_t const *key, *value;
+
+	for (idx = 0; (frame = id3_tag_findframe (tag, "TXXX", idx)); idx++) {
+		if (frame->nfields < 3)
+			continue;
+
+		key = id3_ucs4_latin1duplicate(id3_field_getstring(&frame->fields[1]));
+		value = id3_ucs4_latin1duplicate(id3_field_getstring(&frame->fields[2]));
+
+		debug("Found a TXX frame: %s = %s", key, value);
+
+		if (!strcasecmp(key, "replaygain_track_gain"))
+			info->rg_track = atof(value);
+		else if (!strcasecmp(key, "replaygain_album_gain"))
+			info->rg_album = atof(value);
+		else if (!strcasecmp(key, "replaygain_track_peak"))
+			info->rg_track_peak = atof(value);
+		else if (!strcasecmp(key, "replaygain_album_peak"))
+			info->rg_album_peak = atof(value);
+
+		free(key);
+		free(value);
+	}
+}
+
 static int count_time_internal (struct mp3_data *data)
 {
 	struct xing xing;
@@ -467,6 +499,7 @@
 			info->title = get_tag (tag, ID3_FRAME_TITLE);
 			info->album = get_tag (tag, ID3_FRAME_ALBUM);
 			track = get_tag (tag, ID3_FRAME_TRACK);
+			get_replay_gain(info, tag);
 
 			if (track) {
 				char *end;
diff -Naur orig/decoder_plugins/vorbis/vorbis.c patched/decoder_plugins/vorbis/vorbis.c
--- orig/decoder_plugins/vorbis/vorbis.c	2012-07-11 22:29:30.000000000 +0200
+++ patched/decoder_plugins/vorbis/vorbis.c	2012-10-23 13:49:54.895391612 +0200
@@ -98,6 +98,21 @@
 					"track=", strlen ("track=")))
 			info->track = atoi (comments->user_comments[i]
 					+ strlen ("track="));
+		else if (!strncasecmp(comments->user_comments[i],
+					"replaygain_track_gain=", strlen ("replaygain_track_gain="))) {
+			info->rg_track = atof (comments->user_comments[i]
+					+ strlen ("replaygain_track_gain="));
+		}
+		else if (!strncasecmp(comments->user_comments[i],
+					"replaygain_album_gain=", strlen ("replaygain_album_gain="))) {
+			info->rg_album = atof (comments->user_comments[i]
+					+ strlen ("replaygain_album_gain="));
+		}
+		else if (!strncasecmp(comments->user_comments[i],
+					"replaygain_track_peak=", strlen ("replaygain_track_peak="))) {
+			info->rg_track_peak = atof (comments->user_comments[i]
+					+ strlen ("replaygain_track_peak="));
+		}
 	}
 }
 
diff -Naur orig/player.c patched/player.c
--- orig/player.c	2012-07-16 01:33:34.000000000 +0200
+++ patched/player.c	2012-10-23 14:04:34.223751983 +0200
@@ -112,6 +112,8 @@
 
 static struct bitrate_list bitrate_list;
 
+static void preload_tags(const char *file, const struct decoder *f);
+
 static void bitrate_list_init (struct bitrate_list *b)
 {
 	assert (b != NULL);
@@ -375,12 +377,16 @@
 	precache.ok =  0;
 }
 
-static void show_tags (const struct file_tags *tags)
+void show_tags (const struct file_tags *tags)
 {
 	debug ("TAG[title]: %s", tags->title ? tags->title : "N/A");
 	debug ("TAG[album]: %s", tags->album ? tags->album : "N/A");
 	debug ("TAG[artist]: %s", tags->artist ? tags->artist : "N/A");
 	debug ("TAG[track]: %d", tags->track);
+	debug ("TAG[track_gain]: %f", tags->rg_track);
+	debug ("TAG[track_peak]: %f", tags->rg_track_peak);
+	debug ("TAG[album_gain]: %f", tags->rg_album);
+	debug ("TAG[album_peak]: %f", tags->rg_album_peak);	
 }
 
 /* Update tags if tags from the decoder or the stream are available. */
@@ -442,7 +448,8 @@
 static void decode_loop (const struct decoder *f, void *decoder_data,
 		const char *next_file, struct out_buf *out_buf,
 		struct sound_params *sound_params, struct md5_data *md5,
-		const float already_decoded_sec)
+		const float already_decoded_sec,
+		const char *file)
 {
 	bool eof = false;
 	bool stopped = false;
@@ -459,6 +466,8 @@
 	curr_tags = tags_new ();
 	UNLOCK (curr_tags_mut);
 
+	preload_tags(file, f);
+
 	if (f->get_stream) {
 		LOCK (decoder_stream_mut);
 		decoder_stream = f->get_stream (decoder_data);
@@ -684,6 +693,36 @@
 }
 #endif
 
+/**
+ * Reads the tags from the decoder.
+ *
+ * This is necessary to apply ReplayGain.  The OGG/Vorbis codec updates them
+ * from the stream, but the MP3 decoder does not, so without calling this the
+ * tags wouldn't be available and the volume wouldn't be adjusted.
+ *
+ * TODO: request from cache, see tags_cache_get_immediate().
+ */
+static void preload_tags(const char *file, const struct decoder *f)
+{
+	struct file_tags *new_tags;
+
+	if (file && !f->current_tags && f->info) {
+		debug("Decoder doesn't support streaming tags, preloading.");
+
+		LOCK (curr_tags_mut);
+
+		new_tags = tags_new ();
+		f->info (file, new_tags, TAGS_COMMENTS);
+		tags_copy (curr_tags, new_tags);
+		show_tags (new_tags);
+		tags_free (new_tags);
+		tags_change ();
+		tags_source = TAGS_SOURCE_DECODER;
+
+		UNLOCK (curr_tags_mut);
+	}
+}
+
 /* Play a file (disk file) using the given decoder. next_file is precached. */
 static void play_file (const char *file, const struct decoder *f,
 		const char *next_file, struct out_buf *out_buf)
@@ -785,7 +824,7 @@
 	precache_reset (&precache);
 
 	decode_loop (f, decoder_data, next_file, out_buf, &sound_params,
-			&md5, already_decoded_time);
+			&md5, already_decoded_time, file);
 
 #if !defined(NDEBUG) && defined(DEBUG)
 	if (md5.okay) {
@@ -826,7 +865,7 @@
 		audio_state_started_playing ();
 		bitrate_list_init (&bitrate_list);
 		decode_loop (f, decoder_data, NULL, out_buf, &sound_params,
-				&null_md5, 0.0);
+				&null_md5, 0.0, NULL);
 	}
 }
 
diff -Naur orig/player.h patched/player.h
--- orig/player.h	2011-12-30 21:02:17.000000000 +0100
+++ patched/player.h	2012-10-23 13:49:54.899391630 +0200
@@ -19,6 +19,7 @@
 struct file_tags *player_get_curr_tags ();
 void player_pause ();
 void player_unpause ();
+void show_tags (const struct file_tags *tags);
 
 #ifdef __cplusplus
 }
diff -Naur orig/playlist.c patched/playlist.c
--- orig/playlist.c	2012-09-27 11:25:44.000000000 +0200
+++ patched/playlist.c	2012-10-23 13:49:54.899391630 +0200
@@ -86,6 +86,10 @@
 
 	dst->track = src->track;
 	dst->time = src->time;
+	dst->rg_track = src->rg_track;
+	dst->rg_track_peak = src->rg_track_peak;
+	dst->rg_album = src->rg_album;
+	dst->rg_album_peak = src->rg_album_peak;
 	dst->filled = src->filled;
 }
 
@@ -100,6 +104,10 @@
 	tags->track = -1;
 	tags->time = -1;
 	tags->filled = 0;
+	tags->rg_track = 0;
+	tags->rg_track_peak = 0;
+	tags->rg_album = 0;
+	tags->rg_album_peak = 0;
 
 	return tags;
 }
diff -Naur orig/playlist.h patched/playlist.h
--- orig/playlist.h	2012-08-13 07:04:45.000000000 +0200
+++ patched/playlist.h	2012-10-23 13:49:54.899391630 +0200
@@ -31,6 +31,10 @@
 	int track;
 	int time;
 	int filled; /* Which tags are filled: TAGS_COMMENTS, TAGS_TIME. */
+	float rg_track;
+	float rg_track_peak;
+	float rg_album;
+	float rg_album_peak;
 };
 
 enum file_type
diff -Naur orig/tags_cache.c patched/tags_cache.c
--- orig/tags_cache.c	2012-09-27 07:41:02.000000000 +0200
+++ patched/tags_cache.c	2012-10-23 13:49:54.899391630 +0200
@@ -42,6 +42,7 @@
 
 #include "common.h"
 #include "server.h"
+#include "player.h"
 #include "playlist.h"
 #include "rbtree.h"
 #include "files.h"
@@ -65,7 +66,7 @@
  * temporarily set it to zero to disable cache activity during structural
  * changes which require multiple commits.
  */
-#define CACHE_DB_FORMAT_VERSION	1
+#define CACHE_DB_FORMAT_VERSION	2
 
 /* How frequently to flush the tags database to disk.  A value of zero
  * disables flushing. */
@@ -217,7 +218,12 @@
 		+ album_len
 		+ title_len
 		+ sizeof(rec->tags->track)
-		+ sizeof(rec->tags->time);
+		+ sizeof(rec->tags->time)
+		+ sizeof(rec->tags->rg_track)
+		+ sizeof(rec->tags->rg_track_peak)
+		+ sizeof(rec->tags->rg_album)
+		+ sizeof(rec->tags->rg_album_peak)
+		;
 
 	buf = p = (char *)xmalloc (*len);
 
@@ -254,6 +260,18 @@
 	memcpy (p, &rec->tags->time, sizeof(rec->tags->time));
 	p += sizeof(rec->tags->time);
 
+	memcpy (p, &rec->tags->rg_track, sizeof(rec->tags->rg_track));
+	p += sizeof(rec->tags->rg_track);
+
+	memcpy (p, &rec->tags->rg_track_peak, sizeof(rec->tags->rg_track_peak));
+	p += sizeof(rec->tags->rg_track_peak);
+
+	memcpy (p, &rec->tags->rg_album, sizeof(rec->tags->rg_album));
+	p += sizeof(rec->tags->rg_album);
+
+	memcpy (p, &rec->tags->rg_album_peak, sizeof(rec->tags->rg_album_peak));
+	p += sizeof(rec->tags->rg_album_peak);
+
 	return buf;
 }
 #endif
@@ -302,6 +320,10 @@
 		extract_str (rec->tags->title);
 		extract_num (rec->tags->track);
 		extract_num (rec->tags->time);
+		extract_num (rec->tags->rg_track);
+		extract_num (rec->tags->rg_track_peak);
+		extract_num (rec->tags->rg_album);
+		extract_num (rec->tags->rg_album_peak);
 
 		if (rec->tags->title)
 			rec->tags->filled |= TAGS_COMMENTS;
