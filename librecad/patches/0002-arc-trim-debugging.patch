From ca2adcda48142cead82052f7237cb3f791b28093 Mon Sep 17 00:00:00 2001
From: Dongxu Li <dli@tamaggo.com>
Date: Sun, 14 Apr 2013 16:32:19 -0400
Subject: [PATCH 2/8] arc trim debugging

---
 common.pro                         |   4 +-
 librecad/src/lib/engine/rs_arc.cpp | 120 ++++++++++---------------------------
 librecad/src/lib/engine/rs_arc.h   |   7 ++-
 3 files changed, 41 insertions(+), 90 deletions(-)

diff --git a/common.pro b/common.pro
index 4e6b5b5..45ac3d5 100644
--- a/common.pro
+++ b/common.pro
@@ -79,8 +79,8 @@ win32 {
 
 # c++11 is now obligatory for LibreCAD
 message(We will be using CPP11 features)
-QMAKE_CXXFLAGS_DEBUG += -std=c++0x
-QMAKE_CXXFLAGS += -std=c++0x
+QMAKE_CXXFLAGS_DEBUG += -std=c++0x -g
+QMAKE_CXXFLAGS += -std=c++0x -g
 
 # svg support
 QT += svg
diff --git a/librecad/src/lib/engine/rs_arc.cpp b/librecad/src/lib/engine/rs_arc.cpp
index 69cf8b9..56ad097 100644
--- a/librecad/src/lib/engine/rs_arc.cpp
+++ b/librecad/src/lib/engine/rs_arc.cpp
@@ -639,108 +639,54 @@ void RS_Arc::trimEndpoint(const RS_Vector& pos) {
 
 
 RS2::Ending RS_Arc::getTrimPoint(const RS_Vector& trimCoord,
-                                 const RS_Vector& /*trimPoint*/) {
+                                 const RS_Vector& trimPoint) {
 
     //double angEl = data.center.angleTo(trimPoint);
-    double angM = data.center.angleTo(trimCoord);
-    if (RS_Math::getAngleDifference(angM, data.angle1, isReversed()) > RS_Math::getAngleDifference(data.angle2,angM, isReversed())) {
+    double angMouse = data.center.angleTo(trimCoord);
+    double angTrim = data.center.angleTo(trimPoint);
+
+    if( RS_Math::isAngleBetween(angTrim, data.angle1, angMouse, isReversed())) {
         return RS2::EndingStart;
     } else {
         return RS2::EndingEnd;
     }
 }
 
-RS_Vector RS_Arc::prepareTrim(const RS_Vector& trimCoord,
+RS_Vector RS_Arc::prepareTrim(const RS_Vector& mousePoint,
                               const RS_VectorSolutions& trimSol) {
 //special trimming for ellipse arc
     if( ! trimSol.hasValid() ) return (RS_Vector(false));
-    if( trimSol.getNumber() == 1 ) return (trimSol.get(0));
-    double am=data.center.angleTo(trimCoord);
-    QList<double> ias;
-    double ia(0.),ia2(0.);
-    RS_Vector is,is2;
-    for(int ii=0; ii<trimSol.getNumber(); ii++) { //find closest according to arc angle
-        ias.append(data.center.angleTo(trimSol.get(ii)));
-        //std::cout<<"( "<<ias[ii]<<" ) ";
-        if( !ii ||  fabs( remainder( ias[ii] - am, 2*M_PI)) < fabs( remainder( ia -am, 2*M_PI)) ) {
-            ia = ias[ii];
-            is = trimSol.get(ii);
-        }
-    }
-    //std::cout<<std::endl;
-    qSort(ias.begin(),ias.end());
-    for(int ii=0; ii<trimSol.getNumber(); ii++) { //find segment to enclude trimCoord
-        if ( ! RS_Math::isSameDirection(ia,ias[ii],RS_TOLERANCE)) continue;
-        if( RS_Math::isAngleBetween(am,ias[(ii+trimSol.getNumber()-1)% trimSol.getNumber()],ia,isReversed()))  {
-            ia2=ias[(ii+trimSol.getNumber()-1)% trimSol.getNumber()];
-        } else {
-            ia2=ias[(ii+1)% trimSol.getNumber()];
+    if( trimSol.size() == 1 ) return (trimSol.get(0));
+    double aMin=getAngle1();
+    double aMax=getAngle2();
+    if(isReversed()) qSwap(aMin, aMax);
+    const double angleMouse=getArcAngle(mousePoint);
+    RS_Vector vp=trimSol.at(0);
+    double da=fabs(remainder(getArcAngle(vp) - angleMouse, 2.*M_PI));
+
+    for(size_t i=1; i<trimSol.size(); i++){
+        const double da1=fabs(remainder(getArcAngle(trimSol.at(i)) - angleMouse, 2.*M_PI));
+        if(da1<da){
+            vp=trimSol.at(i);
+            da=da1;
         }
-        break;
     }
-    if( RS_Math::isSameDirection(ia2,ia,RS_TOLERANCE) ) {
-        is2=is;
-    } else {
-        for(int ii=0; ii<trimSol.getNumber(); ii++) { //find segment to enclude trimCoord
-            if ( ! RS_Math::isSameDirection(ia2,data.center.angleTo(trimSol.get(ii)),RS_TOLERANCE) ) continue;
-            is2=trimSol.get(ii);
-            break;
-        }
-    }
-    if(RS_Math::isSameDirection(getAngle1(),getAngle2(),RS_TOLERANCE_ANGLE)) {
-        //whole circle
-        if( RS_Math::isAngleBetween(am,ia,ia2,isReversed()) ) {
-            setAngle1(ia);
-            setAngle2(ia2);
-        } else {
-            setAngle2(ia);
-            setAngle1(ia2);
-        }
-    } else {
-        double dia=fabs(remainder(ia-am,2*M_PI));
-        double dia2=fabs(remainder(ia2-am,2*M_PI));
-        double ai_min=std::min(dia,dia2);
-        double da1=fabs(remainder(getAngle1()-am,2*M_PI));
-        double da2=fabs(remainder(getAngle2()-am,2*M_PI));
-        double da_min=std::min(da1,da2);
-        if( da_min < ai_min ) {
-            //trimming one end of arc
-            bool irev= RS_Math::isAngleBetween(am,ia2,ia, isReversed()) ;
-            //std::cout<<"angle1="<<getAngle1()<<" angle2="<<getAngle2()<<" am="<< am<<" ia="<<ia<<" ia2="<<ia2<<" irev="<<irev<<std::endl;
-            if ( RS_Math::isAngleBetween(ia,getAngle1(),getAngle2(), isReversed()) &&
-                    RS_Math::isAngleBetween(ia2,getAngle1(),getAngle2(), isReversed()) ) { //
-                if(irev) {
-                    setAngle2(ia);
-                    setAngle1(ia2);
-                } else {
-                    setAngle1(ia);
-                    setAngle2(ia2);
-                }
-                da1=fabs(remainder(getAngle1()-am,2*M_PI));
-                da2=fabs(remainder(getAngle2()-am,2*M_PI));
-            }
-            if( ((da1 < da2) && (RS_Math::isAngleBetween(ia2,ia,getAngle1(),isReversed()))) ||
-                    ((da1 > da2) && (RS_Math::isAngleBetween(ia2,getAngle2(),ia,isReversed())))
-              ) {
-                RS_Math::swap(is,is2);
-                // std::cout<<"reset: angle1="<<getAngle1()<<" angle2="<<getAngle2()<<" am="<< am<<" is="<<data.center.angleTo(is)<<" ia2="<<ia2<<std::endl;
-            }
-        } else {
-            //choose intersection as new end
-            if( dia > dia2) {
-                RS_Math::swap(is,is2);
-                RS_Math::swap(ia,ia2);
-            }
-            if(RS_Math::isAngleBetween(ia,getAngle1(),getAngle2(),isReversed())) {
-                if(RS_Math::isAngleBetween(am,getAngle1(),ia,isReversed())) {
-                    setAngle2(ia);
-                } else {
-                    setAngle1(ia);
-                }
-            }
+
+    if( da < fabs(remainder(aMin - angleMouse, 2.*M_PI)) && da < fabs(remainder(aMax - angleMouse, 2.*M_PI))) return vp;
+    bool revDirection=( da > fabs(remainder(aMin - angleMouse, 2.*M_PI)))?true:false;
+
+    vp=trimSol.at(0);
+    da=RS_Math::getAngleDifference(angleMouse, getArcAngle(vp), revDirection);
+
+    for(size_t i=1; i<trimSol.size(); i++){
+        const double da1=RS_Math::getAngleDifference(angleMouse, getArcAngle(trimSol.at(i)), revDirection);
+        if(da1<da){
+            vp=trimSol.at(i);
+            da=da1;
         }
     }
-    return is;
+    return vp;
+
 }
 
 
diff --git a/librecad/src/lib/engine/rs_arc.h b/librecad/src/lib/engine/rs_arc.h
index effa1d1..d06ab12 100644
--- a/librecad/src/lib/engine/rs_arc.h
+++ b/librecad/src/lib/engine/rs_arc.h
@@ -154,6 +154,10 @@ public:
     void setAngle2(double a2) {
         data.angle2 = a2;
     }
+    /** get angle relative arc center*/
+    double getArcAngle(const RS_Vector& vp) {
+        return (vp - data.center).angle();
+    }
     /**
      * @return Direction 1. The angle at which the arc starts at
      * the startpoint.
@@ -214,7 +218,8 @@ public:
 
     virtual RS2::Ending getTrimPoint(const RS_Vector& coord,
                                      const RS_Vector& trimPoint);
-    virtual RS_Vector prepareTrim(const RS_Vector& coord,
+    /** choose an intersection to trim to based on mouse point */
+    virtual RS_Vector prepareTrim(const RS_Vector& mousePoint,
                                   const RS_VectorSolutions& trimSol);
 
     virtual void reverse();
-- 
1.8.2.3

