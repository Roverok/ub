diff -Naur orig/main/vcl/unx/generic/desktopdetect/desktopdetector.cxx patched/main/vcl/unx/generic/desktopdetect/desktopdetector.cxx
--- orig/main/vcl/unx/generic/desktopdetect/desktopdetector.cxx	2014-02-25 09:32:38.000000000 +0100
+++ patched/main/vcl/unx/generic/desktopdetect/desktopdetector.cxx	2014-07-14 22:30:38.000000000 +0200
@@ -44,12 +44,16 @@
     DESKTOP_NONE = 0,
     DESKTOP_UNKNOWN,
     DESKTOP_GNOME,
+    DESKTOP_UNITY,
+    DESKTOP_XFCE,
+    DESKTOP_MATE,
     DESKTOP_KDE,
     DESKTOP_KDE4,
     DESKTOP_CDE
 };
 
-static const char * desktop_strings[] = { "none", "unknown", "GNOME", "KDE", "KDE4", "CDE" };
+static const char * desktop_strings[] = { 
+	"none", "unknown", "GNOME", "UNITY", "XFCE", "MATE", "KDE", "KDE4", "CDE" };
 
 static bool is_gnome_desktop( Display* pDisplay )
 {
@@ -263,6 +267,12 @@
             aRet.appendAscii( desktop_strings[DESKTOP_KDE4] );
         if ( aOver.equalsIgnoreAsciiCase( "gnome" ) )
             aRet.appendAscii( desktop_strings[DESKTOP_GNOME] );
+        if ( aOver.equalsIgnoreAsciiCase( "unity" ) )
+            aRet.appendAscii( desktop_strings[DESKTOP_UNITY] );
+        if ( aOver.equalsIgnoreAsciiCase( "xfce" ) )
+            aRet.appendAscii( desktop_strings[DESKTOP_XFCE] );
+        if ( aOver.equalsIgnoreAsciiCase( "mate" ) )
+            aRet.appendAscii( desktop_strings[DESKTOP_MATE] );
         if ( aOver.equalsIgnoreAsciiCase( "kde" ) )
             aRet.appendAscii( desktop_strings[DESKTOP_KDE] );
         if ( aOver.equalsIgnoreAsciiCase( "none" ) )
@@ -307,7 +317,22 @@
             */
             if( ! ( pNoXInitThreads && *pNoXInitThreads ) )
                 XInitThreads();
-            
+
+            static const char* pDesktop = getenv( "XDG_CURRENT_DESKTOP" );
+            if( pDesktop && *pDesktop )
+            {
+            	OString Desk( pDesktop );
+            	
+    			if ( Desk.equalsIgnoreAsciiCase( "unity" ) )
+        			aRet.appendAscii( desktop_strings[DESKTOP_UNITY] );
+   				else if ( Desk.equalsIgnoreAsciiCase( "gnome" ) )
+        			aRet.appendAscii( desktop_strings[DESKTOP_GNOME] );
+    			else if ( Desk.equalsIgnoreAsciiCase( "mate" ) )
+        			aRet.appendAscii( desktop_strings[DESKTOP_MATE] );
+    			else if ( Desk.equalsIgnoreAsciiCase( "xfce" ) )
+        			aRet.appendAscii( desktop_strings[DESKTOP_XFCE] );
+			}
+                        
             Display* pDisplay = XOpenDisplay( pDisplayStr );
             if( pDisplay )
             {
diff -Naur orig/main/vcl/unx/generic/plugadapt/salplug.cxx patched/main/vcl/unx/generic/plugadapt/salplug.cxx
--- orig/main/vcl/unx/generic/plugadapt/salplug.cxx	2014-02-25 09:32:47.000000000 +0100
+++ patched/main/vcl/unx/generic/plugadapt/salplug.cxx	2014-07-15 00:06:00.000000000 +0200
@@ -48,12 +48,16 @@
     DESKTOP_NONE = 0,
     DESKTOP_UNKNOWN,
     DESKTOP_GNOME,
+    DESKTOP_UNITY,
+    DESKTOP_XFCE,
+    DESKTOP_MATE,
     DESKTOP_KDE,
     DESKTOP_KDE4,
     DESKTOP_CDE
 };
 
-static const char * desktop_strings[] = { "none", "unknown", "GNOME", "KDE", "KDE4", "CDE" };
+static const char * desktop_strings[] = { 
+	"none", "unknown", "GNOME", "UNITY", "XFCE", "MATE", "KDE", "KDE4", "CDE" };
 
 static SalInstance* tryInstance( const OUString& rModuleBase )
 {
@@ -157,7 +161,13 @@
 {
     static const char* pKDEFallbackList[] =
     {
-        "kde4", "kde", "gtk", "gen", 0
+#if ENABLE_KDE4
+        "kde4",
+#endif
+#if ENABLE_KDE
+        "kde",
+#endif
+        "gtk", "gen", 0
     };
     
     static const char* pStandardFallbackList[] =
@@ -177,7 +187,10 @@
     // no server at all: dummy plugin
     if ( desktop.equalsAscii( desktop_strings[DESKTOP_NONE] ) )
         pList = pHeadlessFallbackList;
-    else if ( desktop.equalsAscii( desktop_strings[DESKTOP_GNOME] ) )
+    else if ( desktop.equalsAscii( desktop_strings[DESKTOP_GNOME] ) ||
+			  desktop.equalsAscii( desktop_strings[DESKTOP_UNITY] ) ||
+			  desktop.equalsAscii( desktop_strings[DESKTOP_XFCE] ) ||
+			  desktop.equalsAscii( desktop_strings[DESKTOP_MATE] ) )
         pList = pStandardFallbackList;
     else if( desktop.equalsAscii( desktop_strings[DESKTOP_KDE] ) )
     {
