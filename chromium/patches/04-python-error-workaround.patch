diff -Naur orig/build/gyp_chromium patched/build/gyp_chromium
--- orig/build/gyp_chromium	2014-02-20 21:28:44.000000000 +0100
+++ patched/build/gyp_chromium	2014-02-21 17:25:26.656769539 +0100
@@ -10,10 +10,8 @@
 import glob
 import gyp_helper
 import os
-import pipes
 import shlex
 import subprocess
-import string
 import sys
 
 script_dir = os.path.dirname(os.path.realpath(__file__))
@@ -56,91 +54,10 @@
 else:
   psyco = None
 
-
-def GetSupplementalFiles():
-  """Returns a list of the supplemental files that are included in all GYP
-  sources."""
-  return glob.glob(os.path.join(chrome_src, '*', 'supplement.gypi'))
-
-
-def FormatKeyForGN(key):
-  """Returns the given GYP key reformatted for GN.
-
-  GYP dictionary keys can be almost anything, but in GN they are identifiers
-  and must follow the same rules. This reformats such keys to be valid GN
-  identifiers."""
-  return ''.join([c if c in string.ascii_letters else '_' for c in key])
-
-
-def EscapeStringForGN(s):
-  """Converts a string to a GN string literal."""
-  # Escape $ characters which have special meaning to GN.
-  return '"' + s.replace('$', '\\$').replace('"', '\\"') + '"'
-
-
-def GetGypVarsForGN(supplemental_files):
-  """Returns a dictionary of all GYP vars that we will be passing to GN."""
-  vars_dict = {}
-
-  for supplement in supplemental_files:
-    with open(supplement, 'r') as f:
-      try:
-        file_data = eval(f.read(), {'__builtins__': None}, None)
-      except SyntaxError, e:
-        e.filename = os.path.abspath(supplement)
-        raise
-      variables = file_data.get('variables', [])
-      for v in variables:
-        vars_dict[FormatKeyForGN(v)] = EscapeStringForGN(str(variables[v]))
-
-  env_string = os.environ.get('GYP_DEFINES', '')
-  items = shlex.split(env_string)
-  for item in items:
-    tokens = item.split('=', 1)
-    # Some GYP variables have hyphens, which we don't support.
-    key = FormatKeyForGN(tokens[0])
-    if len(tokens) == 2:
-      vars_dict[key] = tokens[1]
-    else:
-      # No value supplied, treat it as a boolean and set it.
-      vars_dict[key] = 'true'
-
-  return vars_dict
-
-
-def GetArgsStringForGN(supplemental_files):
-  """Returns the args to pass to GN.
-  Based on a subset of the GYP variables that have been rewritten a bit."""
-
-  vars_dict = GetGypVarsForGN(supplemental_files)
-  gn_args = ''
-
-  # These tuples of (key, value, gn_arg_string) use the gn_arg_string for
-  # gn when the key is set to the given value in the GYP arguments.
-  remap_cases = [
-      ('branding', 'Chrome', 'is_chrome_branded=true'),
-      ('buildtype', 'Official', 'is_official_build=true'),
-      ('component', 'shared_library', 'is_component_build=true'),
-  ]
-  for i in remap_cases:
-    if i[0] in vars_dict and vars_dict[i[0]] == i[1]:
-      gn_args += ' ' + i[2]
-
-  # These string arguments get passed directly.
-  for v in ['windows_sdk_path']:
-    if v in vars_dict:
-      gn_args += ' ' + v + '=' + EscapeStringForGN(vars_dict[v])
-
-  # Set the GYP flag so BUILD files know they're being invoked in GYP mode.
-  gn_args += ' is_gyp=true'
-  return gn_args.strip()
-
-
-def additional_include_files(supplemental_files, args=[]):
+def additional_include_files(args=[]):
   """
-  Returns a list of additional (.gypi) files to include, without duplicating
-  ones that are already specified on the command line. The list of supplemental
-  include files is passed in as an argument.
+  Returns a list of additional (.gypi) files to include, without
+  duplicating ones that are already specified on the command line.
   """
   # Determine the include files specified on the command line.
   # This doesn't cover all the different option formats you can use,
@@ -160,50 +77,15 @@
   AddInclude(os.path.join(script_dir, 'common.gypi'))
 
   # Optionally add supplemental .gypi files if present.
-  for supplement in supplemental_files:
+  supplements = glob.glob(os.path.join(chrome_src, '*', 'supplement.gypi'))
+  for supplement in supplements:
     AddInclude(supplement)
 
   return result
 
-
-def RunGN(supplemental_includes):
-  """Runs GN, returning True if it succeeded, printing an error and returning
-  false if not."""
-
-  # The binaries in platform-specific subdirectories in src/tools/gn/bin.
-  gnpath = SRC_DIR + '/tools/gn/bin/'
-  if sys.platform in ('cygwin', 'win32'):
-    gnpath += 'win/gn.exe'
-  elif sys.platform.startswith('linux'):
-    # On Linux we have 32-bit and 64-bit versions.
-    if subprocess.check_output(["getconf", "LONG_BIT"]).find("64") >= 0:
-      gnpath += 'linux/gn'
-    else:
-      gnpath += 'linux/gn32'
-  elif sys.platform == 'darwin':
-    gnpath += 'mac/gn'
-  else:
-    print 'Unknown platform for GN: ', sys.platform
-    return False
-
-  print 'Generating gyp files from GN...'
-
-  # Need to pass both the source root (the bots don't run this command from
-  # within the source tree) as well as set the is_gyp value so the BUILD files
-  # to know they're being run under GYP.
-  args = [gnpath, 'gyp', '-q',
-          '--root=' + chrome_src,
-          '--args=' + GetArgsStringForGN(supplemental_includes)]
-  return subprocess.call(args) == 0
-
-
 if __name__ == '__main__':
   args = sys.argv[1:]
 
-  if int(os.environ.get('GYP_CHROMIUM_NO_ACTION', 0)):
-    print 'Skipping gyp_chromium due to GYP_CHROMIUM_NO_ACTION env var.'
-    sys.exit(0)
-
   # Use the Psyco JIT if available.
   if psyco:
     psyco.profile()
@@ -243,13 +125,7 @@
     else:
       args.append(os.path.join(script_dir, 'all.gyp'))
 
-  supplemental_includes = GetSupplementalFiles()
-
-  if not RunGN(supplemental_includes):
-    sys.exit(1)
-
-  args.extend(
-      ['-I' + i for i in additional_include_files(supplemental_includes, args)])
+  args.extend(['-I' + i for i in additional_include_files(args)])
 
   # There shouldn't be a circular dependency relationship between .gyp files,
   # but in Chromium's .gyp files, on non-Mac platforms, circular relationships
@@ -274,40 +150,6 @@
       not 'OS=ios' in os.environ.get('GYP_DEFINES', []):
     os.environ['GYP_GENERATORS'] = 'ninja'
 
-  # If using ninja on windows, and not opting out of the the automatic
-  # toolchain, then set up variables for the automatic toolchain. Opt-out is
-  # on by default, for now.
-  if (sys.platform in ('win32', 'cygwin') and
-      os.environ.get('GYP_GENERATORS') == 'ninja' and
-      os.environ.get('GYP_MSVS_USE_SYSTEM_TOOLCHAIN', '1') != '1'):
-    # For now, call the acquisition script here so that there's only one
-    # opt-in step required. This will be moved to a separate DEPS step once
-    # it's on by default.
-    subprocess.check_call([
-        sys.executable,
-        os.path.normpath(os.path.join(script_dir, '..', 'tools', 'win',
-                                      'toolchain',
-                                      'get_toolchain_if_necessary.py'))])
-    toolchain = os.path.normpath(os.path.join(
-        script_dir, '..', 'third_party', 'win_toolchain', 'files'))
-    os.environ['GYP_MSVS_OVERRIDE_PATH'] = toolchain
-    os.environ['GYP_MSVS_VERSION'] = '2013'
-    # We need to make sure windows_sdk_path is set to the automated toolchain
-    # values in GYP_DEFINES, but don't want to override any other values there.
-    gyp_defines_dict = gyp.NameValueListToDict(gyp.ShlexEnv('GYP_DEFINES'))
-    win8sdk = os.path.join(toolchain, 'win8sdk')
-    gyp_defines_dict['windows_sdk_path'] = win8sdk
-    os.environ['WINDOWSSDKDIR'] = win8sdk
-    os.environ['GYP_DEFINES'] = ' '.join('%s=%s' % (k, pipes.quote(str(v)))
-        for k, v in gyp_defines_dict.iteritems())
-    # Include the VS runtime in the PATH in case it's not machine-installed.
-    runtime_path = ';'.join(
-        os.path.normpath(os.path.join(
-            script_dir, '..', 'third_party', 'win_toolchain', 'files', s))
-        for s in ('sys64', 'sys32'))
-    os.environ['PATH'] = runtime_path + os.environ['PATH']
-    print('Using automatic toolchain in %s.' % toolchain)
-
   # If CHROMIUM_GYP_SYNTAX_CHECK is set to 1, it will invoke gyp with --check
   # to enfore syntax checking.
   syntax_check = os.environ.get('CHROMIUM_GYP_SYNTAX_CHECK')
