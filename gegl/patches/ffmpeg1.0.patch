diff -Naur orig/operations/external/ff-load.c patched/operations/external/ff-load.c
--- orig/operations/external/ff-load.c	2012-04-01 13:17:57.000000000 +0200
+++ patched/operations/external/ff-load.c	2013-03-31 20:03:07.283260305 +0200
@@ -137,7 +137,7 @@
       if (p->enc)
         avcodec_close (p->enc);
       if (p->ic)
-        av_close_input_file (p->ic);
+        avformat_close_input (p->ic);
       if (p->lavc_frame)
         av_free (p->lavc_frame);
 
@@ -216,7 +216,7 @@
             {
               do
                 {
-                  if (av_read_packet (p->ic, &p->pkt) < 0)
+                  if (av_read_frame (p->ic, &p->pkt) < 0)
                     {
                       fprintf (stderr, "av_read_packet failed for %s\n",
                                o->path);
@@ -271,12 +271,12 @@
       gint err;
 
       ff_cleanup (o);
-      err = av_open_input_file (&p->ic, o->path, NULL, 0, NULL);
+	  err = avformat_open_input (&p->ic, o->path, NULL, NULL);
       if (err < 0)
         {
           print_error (o->path, err);
         }
-      err = av_find_stream_info (p->ic);
+      err = avformat_find_stream_info (p->ic, NULL);
       if (err < 0)
         {
           g_warning ("ff-load: error finding stream info for %s", o->path);
@@ -312,7 +312,7 @@
       if (p->codec->capabilities & CODEC_CAP_TRUNCATED)
         p->enc->flags |= CODEC_FLAG_TRUNCATED;
 
-      if (avcodec_open (p->enc, p->codec) < 0)
+      if (avcodec_open2 (p->enc, p->codec, NULL) < 0)
         {
           g_warning ("error opening codec %s", p->enc->codec->name);
           return;
diff -Naur orig/operations/workshop/external/ff-save.c patched/operations/workshop/external/ff-save.c
--- orig/operations/workshop/external/ff-save.c	2012-03-29 22:05:50.000000000 +0200
+++ patched/operations/workshop/external/ff-save.c	2013-03-31 20:21:55.673674956 +0200
@@ -451,7 +451,7 @@
       buffer_read (p, (uint8_t *) p->samples,
                    p->audio_input_frame_size * 2 * c->channels);
 
-      pkt.size = avcodec_encode_audio (c, p->audio_outbuf,
+      pkt.size = avcodec_encode_audio2 (c, p->audio_outbuf,
                                        p->audio_outbuf_size, p->samples);
 
       pkt.pts = c->coded_frame->pts;
@@ -487,7 +487,7 @@
   AVCodecContext *c;
   AVStream *st;
 
-  st = av_new_stream (oc, 0);
+  st = avformat_new_stream (oc, 0);
   if (!st)
     {
       fprintf (stderr, "Could not alloc stream %p %p %i\n", op, oc, codec_id);
@@ -568,7 +568,7 @@
     }
 
   /* open the codec */
-  if (avcodec_open (c, codec) < 0)
+  if (avcodec_open2 (c, codec, NULL) < 0)
     {
       fprintf (stderr, "could not open codec\n");
       exit (1);
@@ -700,7 +700,7 @@
     {
       /* encode the image */
       out_size =
-        avcodec_encode_video (c,
+        avcodec_encode_video2 (c,
                               p->video_outbuf,
                               p->video_outbuf_size, picture_ptr);
 
@@ -769,26 +769,26 @@
      /*XXX: FOO p->audio_st = add_audio_stream (op, p->oc, p->fmt->audio_codec);*/
     }
 
-  if (av_set_parameters (p->oc, NULL) < 0)
+  if (avformat_write_header (p->oc, NULL) < 0)
     {
       fprintf (stderr, "Invalid output format propeters\n%s", "");
       return -1;
     }
 
-  dump_format (p->oc, 0, self->path, 1);
+  av_dump_format (p->oc, 0, self->path, 1);
 
   if (p->video_st)
     open_video (p, p->oc, p->video_st);
   if (p->audio_st)
     open_audio (p, p->oc, p->audio_st);
 
-  if (url_fopen (&p->oc->pb, self->path, URL_WRONLY) < 0)
+  if (avio_open (&p->oc->pb, self->path, AVIO_FLAG_WRITE) < 0)
     {
       fprintf (stderr, "couldn't open '%s'\n", self->path);
       return -1;
     }
 
-  av_write_header (p->oc);
+  avformat_write_header (p->oc, NULL);
 
   return 0;
 }
@@ -858,7 +858,7 @@
             av_freep (&p->oc->streams[i]);
           }
 
-        url_fclose (&p->oc->pb);
+        avio_close (&p->oc->pb);
         free (p->oc);
       }
       g_free (o->chant_data);
